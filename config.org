# -**- mode: org; fill-column: 78; lexical-binding: t -**-
#+TITLE: My Literate Emacs Configuration
#+AUTHOR: Carlo Dormeletti
#+EMAIL: carlo.dormeletti@gmail.com
#+DATE: Time-stamp: <2023-12-16 12:12:32>
#+BABEL: :cache yes
#+OPTIONS: num:nil
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle config.el 
#+STARTUP: content hidestars align shrink

This is an Emacs Literate configuration, based on  *org* and *org-babel* to create a configuration file for Emacs.

This file is auto loaded by *init.el* and it is tangled in [[file:config.el][config.el]] during startup.

Some sections are made as .el file in *modules/* subdir and loaded by *config.el*.

  + [[file:modules/tab-line.el][Tab line settings]]

You should check *config.el* for errors and if something is going wrong you should
correct code in *config.org*, or correct code in *config.el* and follow instructions on preamble.

You could use *org-babel-tangle* on this file to tangle it prior to the init phase to
create a new *config.el* and check it, prior to relaunch Emacs.

You could exclude some section setting header arguments *tangle:* to *no*, and the code blocks will not be include in *config.el*

You may want to exclude:

  + mailer configuration in found after *;; load mailer config* that loads [[file:personal/mail-conf.el][mail-conf.el]]
    it suffice to prepend *;;* to the line that contain *load*
  + [[code-arduino][arduino-cli]] if you don't do arduino development

You may want to exclude also some other sections, but beware that it could generate errors as they could have some dependencies or some assigned keybinding, so you must be careful.

Read after every heading or in the code if there are some note about dependencies or keybinding.

*Customization*

Main places where you should customize things are:

  + [[file:personal/personal.el][personal.el]]
  + [[file:personal/mail-conf.el][mail-conf.el]]
  + [[file:personal/cust-func.el][cust-func.el]]

See notes in:

 + *recent-exclude* list in [[recentf][recentf]] section.
 + [[interface][interface]]
 + [[magit][magit]]
 + [[eglot][eglot]]
 + [[AUCTEX][AUCTEX]]
 + [[printing][printing]]


* Preamble

#+name: okk-preamble
#+begin_src emacs-lisp :tangle yes :comments no :padline no
;; -*- mode: emacs-lisp; lexical-binding: t -*-

;;; config.el --- This is Emacs config.el file
;;; Copyright (C) 2023 Carlo Dormeletti
;;;
;;; Author: Carlo Dormeletti <carlo.dormeletti@gmail.com>
;;;
;;; Commentary:
;;; ANY MODIFICATIONS TO THIS FILE WILL BE LOST WHEN THE SOURCE ORG FILE IS
;;; CHANGED, TO AVOID THIS YOU COULD SEE FOLLOWING NOTES!
;;;
;;; This file is produced by org-babel using *config.org* file.
;;; 
;;; If you edit this file you could use:
;;; - org-babel-detangle on the this file after having modified it to update
;;;   *config.org* with modifications present in sections delimited by:
;;;   ;; [[file:config.org::<heading>][<marker>]]
;;;   ...
;;;   ;; <marker>1 ends here
;;;
;;; - org-babel-tangle-jump-to-org on the this file to go to the corresponding
;;;   chunk of code in *config.org*
;;;
;;; Sources could be found at: https://github.com/onekk/okkemacs
;;;
;;; Version: 2023-12-13
;;;
;;; For a detailed explanation see CHANGELOG.md

;;; Code:

;; -------------------------------------
;; set paths

(add-to-list 'load-path (expand-file-name "init.el" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "site-lisp/" user-emacs-directory))

;; -------------------------------------
;; load personal variables
(load (expand-file-name "personal/personal.el" user-emacs-directory))

;; -------------------------------------
;; set european date styles
(add-hook 'calendar-load-hook
              (lambda ()
                (calendar-set-date-style 'european)))


;; -------------------------------------
;; start a server

(require 'server)
(or (server-running-p)
  (server-start))

;; -------------------------------------
;; load mailer config
(load (expand-file-name "personal/mail-conf.el" user-emacs-directory))


;; -------------------------------------
(setq use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))


;;(require 'bind-key)                ;; if you use any :bind variant

;; in emacs 28.1  gnu and nongnu from elpa are included by default

(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(package-initialize)

(use-package gnu-elpa-keyring-update)

(use-package diminish)

;; -------------------------------------
;; Adjust garbage collection values

(setq gc-cons-threshold (* 100 1024 1024)) ;; 100MB as suggested
(setq read-process-output-max (* 1 1024 1024)) ;; 1 MB


;; -------------------------------------
;; Fix location of some fiel to avoid polluting main directory 

(setq custom-file (expand-file-name "var/custom.el" user-emacs-directory))
(load custom-file t t)

;; tell emacs where to read abbrev, bookmarks and other files, used by emacs
(setq
  abbrev-file-name (expand-file-name "var/abbrev_defs" user-emacs-directory)
  bookmark-default-file (expand-file-name "var/bookmarks" user-emacs-directory)
  )

;; -------------------------------------
;; Use UTF-8 

(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

(setq
  locale-coding-system 'utf-8
  default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

*Order is important keep here*

** recentf

*Note:* *recentf-exclude* is not working if used in init as list, use *add-to-list* instead.


#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package recentf
  ;; lazy load recentf
  :hook (
          (find-file . (lambda ()
                         (unless recentf-mode
                           (recentf-mode)
                           (recentf-track-opened-file))))
          (after-init . recentf-mode)
        )
  :init
  (setq
   recentf-max-menu-items 25
   recentf-max-saved-items 25
   recentf-save-file  (expand-file-name "var/recentf-save.el" user-emacs-directory)
   find-file-visit-truename t
   )
  
  :config
  (dolist (oitem
            ( list
              ;; files in elpa directory
              (expand-file-name package-user-dir)
              (expand-file-name "~/.emacs.d/*")
              (expand-file-name okk-conf-dir)
              "/usr/share/emacs/*"
              ".objs"
              ".cache"
              ".cask"
            "COMMIT_EDITMSG\\'"
            ))
      (add-to-list 'recentf-exclude oitem))
  ;; exclude directory 'in okk-secret-dirs'
  (dolist (oitem okk-secret-dirs)
      (add-to-list 'recentf-exclude oitem))
  )


#+end_src

** backup

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; No backup directories

(setq
  make-backup-files nil
  auto-save-default nil
  create-lockfiles nil)


(defun my-backup-enable-predicate (name)
  (let (found)
    (dolist (specialdir okk-secret-dirs found)
      (if (string-prefix-p specialdir name)
          (setq found t)))
    (if found
        nil
      (normal-backup-enable-predicate name))))

(setq backup-enable-predicate #'my-backup-enable-predicate)

; reset to normal backup mode
; (setq backup-enable-predicate #'normal-backup-enable-predicate)


;; ------------------------------------
;; autorevert buffers

(global-auto-revert-mode)


;; -------------------------------------
;; some sane defaults

;; Don't hang when loading file with extra long lines
(global-so-long-mode t)


;; yank (paste) behaviour like usual programs
(delete-selection-mode t)


;; Automaticaly update Time stamps
(add-hook 'before-save-hook 'time-stamp)


(setq
  ;; Double-spaces after periods is morally wrong.
  sentence-end-double-space nil
  ;; Never ding at me, ever.
  ring-bell-function 'ignore
  ;; Fix undo in commands affecting the mark.
  mark-even-if-inactive nil
  ;; accept 'y' or 'n' instead of yes/no
  use-short-answers t
  debug-on-error t
)
#+end_src

** interface

You may want to customize *default-frame-alist* for a font value.

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; Frame position

(when window-system
  (set-frame-position (selected-frame) 40 40)
  (set-frame-size (selected-frame) 188 45))


;; default font
(add-to-list 'default-frame-alist '(font . "Hack-12") '(height . 100))

;;-----------------------
;; Interface

(setq
  inhibit-startup-screen t
  frame-title-format '((:eval (buffer-name))" [%+] OKK Emacs")
  ;; unicode ellipses are better
  truncate-string-ellipsis "…"
  use-file-dialog nil
  )

(tool-bar-mode t)


(setq-default
  initial-scratch-message ";; Emacs lisp scratch buffer. Happy hacking.\n\n"
  ;; fill indicator settings here as a global definition
  fill-column 85
  )

(set-face-attribute 'fill-column-indicator nil :foreground "dark blue")

;; fill column indicator in programming modes, see org-section for org settings
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
;; fill column indicator for text files
(add-hook 'text-mode-hook #'display-fill-column-indicator-mode)

;; Start with a blank buffer unless Emacs was started with a file to open.
;; Otherwise causes split window when opening file from command line or GUI.

(unless (< 1 (length command-line-args))
  (setq initial-buffer-choice (lambda (&optional _)
       (let ((buf (generate-new-buffer "untitled")))
       
       (set-buffer-major-mode buf)
       (message "New Buffer Started")
       ;;(message (number-to-string (length command-line-args)))
       buf))
  )
)

;; Never kill scratch.
(with-current-buffer "*scratch*"
  (emacs-lock-mode 'kill))


;; Emacs 29 introduced smooth, pixel-level scrolling, which removes much of
;; the “jumpiness” you see when scrolling past images.

(if (version< emacs-version "29.0")
    (pixel-scroll-mode)
  (pixel-scroll-precision-mode 1)
  (setq pixel-scroll-precision-large-scroll-height 35.0))


;; ---------------------------------------------------------------------------

;; line number in prog-mode-hook
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; display also column number
(setq column-number-mode t)


;; ---------------------------------------------------------------------------
;; Set modeline

(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  ;;(moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (moody-replace-eldoc-minibuffer-message-function))


;; -------------------------------------
;; set tab-line behaviour

(load (expand-file-name "modules/tab-line.el" user-emacs-directory))

;; ---------------------------------------------------------------------------

;; Cursor change when overwriting 
;; override insert key to change cursor in overwrite mode
;; box = insert
;; hollow = overwrite

(defvar cursor-mode-status 0)
(global-set-key (kbd "<insert>")
                (lambda () (interactive)
                  (cond ((eq cursor-mode-status 0)
                         (setq cursor-type 'hollow)
                         (overwrite-mode (setq cursor-mode-status 1)))
                        (t
                         (setq cursor-type 'box)
                         (overwrite-mode (setq cursor-mode-status 0))))))


;; -------------------------------------
;; indentation 

;; From EmacsWiki
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(setq
  c-basic-indent 'tab-width
  custom-tab-width 'tab-width
  lisp-indent-offset 2)

;; Language-Specific Tweaks
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

(setq-default electric-indent-inhibit t)


;;--------------------------------------
;; uniquify

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)


;;--------------------------------------
;; delimiters (mostly parens)
;; use only built in facilities

(show-paren-mode 1)
(setq
  show-paren-context-when-offscreen 'overlay
  show-paren-when-point-in-periphery t)


;; -------------------------------------
;; helper function used later

(defun add-list-to-list (dst src)
  "Similar to `add-to-list', but accepts a list as 2nd argument"
  (set dst
       (append (eval dst) src)))
#+end_src

* Packages
** bookmarks and project

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; bookmark

;; Move last selected bookmark to top

(defadvice bookmark-jump (after bookmark-jump activate)
  (let ((latest (bookmark-get-bookmark bookmark)))
    (setq bookmark-alist (delq latest bookmark-alist))
    (add-to-list 'bookmark-alist latest)))

;; -------------------------------------
;; project.el

(defun project-root-override (dir)
  "Find DIR's project root by searching for a '.project.el' file.

If this file exists, it marks the project root. For convenient compatibility
with Projectile, '.projectile' is also considered a project root marker.

https://blog.jmthornton.net/p/emacs-project-override"
  (let ((root (or (locate-dominating-file dir ".project.el")
                  (locate-dominating-file dir ".projectile")))
        (backend (ignore-errors (vc-responsible-backend dir))))
    (when root (if (version<= emacs-version "28")
                    (cons 'vc root)
                  (list 'vc backend root)))))

;; Note that we cannot use :hook here because `project-find-functions' doesn't
;; end in "-hook", and we can't use this in :init because it won't be defined
;; yet.
(use-package project
  :config
  (setq project-list-file (expand-file-name "var/projects" user-emacs-directory))
  (add-hook 'project-find-functions #'project-root-override))

(setq project-vc-extra-root-markers '(".project.el" ".projectile"))
#+end_src

** denote

#+NAME: code-denote
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

  (use-package denote
    :init
    (require 'denote-org-dblock)
    :custom
    (denote-directory okk-denote-dir)
    :hook
    (dired-mode . denote-dired-mode)
    :custom-face
    (denote-faces-link ((t (:slant italic))))
    :bind
    (("C-c n n" . denote)
     ("C-c n d" . denote-date)
     ("C-c n i" . denote-link-or-create)
     ("C-c n l" . denote-find-link)
     ("C-c n b" . denote-find-backlink)
     ("C-c n D" . denote-org-dblock-insert-links)
     ("C-c n s" . denote-rename-file-using-front-matter)
     ("C-c n k" . denote-keywords-add)
     ("C-c n K" . denote-keywords-remove))
    )
#+end_src

** ediff

#+NAME: code-ediff
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(setq ediff-split-window-function 'split-window-horizontally)

#+end_src

** org

Setting *org-replace-disputed-keys* to *t* will result in the following replacements:

    S-RET → C-S-RET
    S-up → M-p
    S-down → M-n
    S-left → M--
    S-right → M-+

*Packages:*

  - ox-latex
  - org-modern
  - toc-org
  - org-pretty-table 
    
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; this should avoid conflicts with okk-keys
(setq org-replace-disputed-keys t)

(use-package org
  :hook
  (
          (org-mode . org-indent-mode)
          (org-mode . prettify-symbols-mode)
          (org-mode . display-fill-column-indicator-mode)
          (org-mode . (lambda ()
                        (visual-line-mode 1)))
        )
  :config
  (setq
    org-startup-indented t
    org-hide-leading-stars t
    org-hide-emphasis-markers t
    org-export-with-toc nil
    org-confirm-babel-evaluate nil
    ;; latex
    org-export-latex-listings t
    org-log-done t
    ;; source code
    org-src-tab-acts-natively t
    ;; Preserve leading whitespace characters when exporting and when switching
    ;; between the org buffer and the language mode edit buffer.
    org-src-preserve-indentation t
    ;; fontify code in code blocks
    org-src-fontify-natively t
    ;; Org clock
    org-clock-persist 'history
    org-clock-persistence-insinuate t
    ;; Show lot of clocking history
    org-clock-history-length 23
    ;; Resume clocking task on clock-in if the clock is open
    org-clock-in-resume t
    ;;
    org-support-shift-select t
    org-ellipsis " ▼"
    org-agenda-files okk-agenda-files
      
    ;; Custom agenda command definitions
    org-agenda-custom-commands
      (quote (("N" "Notes" tags "NOTE"
        ((org-agenda-overriding-header "Notes")
         (org-tags-match-list-sublevels t)))
             ))
    ;; defined by denote
    ;;(setq org-default-notes-file "")
   )

  ;; TO DO settings

  (setq org-todo-keywords
  '((sequence
    "TODO(t)"
    "NEXT(n)"
    "WAIT(w)"
    "|"             ; Separates "active" and "inactive" states.
    "DONE(d)"
    "CANCELLED(c)")
   ))
  
  (setq org-todo-state-tags-triggers
    (quote (("CANCELLED" ("CANCELLED" . t))
          ("WAITING" ("WAITING" . t))
          ("HOLD" ("WAITING") ("HOLD" . t))
          (done ("WAITING") ("HOLD"))
          ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
          ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
          ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

  :custom
  ;; Set default file for fleeting notes
  (org-default-notes-file
  (car (denote-directory-files-matching-regexp "inbox")))
  ;; Capture templates
  (org-capture-templates
    '(("f" "Fleeting note" item
      (file+headline org-default-notes-file "Notes")
      "- %?")
      ("t" "New task" entry
      (file+headline org-default-notes-file "Tasks")
      "* TODO %i%?")))

; close use-package
)



;; This make code executable in Emacs
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)
    (latex . t)
    (C . t)
    (shell . t)))


;;-----------------------
;; ox-latex
;;-----------------------

(require 'ox-latex)

(with-eval-after-load "org"
  (setq
     org-latex-prefer-user-labels t
     org-latex-pdf-process '("arara %f")
     ;;org-latex-src-block-backend 'listings
     org-latex-src-block-backend 'minted
        )
  
  ;; per-file-class with minimal packages
  (add-to-list 'org-latex-classes
   '("my-class"
"% arara: lualatex: { shell: true, options: [-halt-on-error] }
% arara: lualatex: { shell: true } 
% arara: lualatex: { synctex: true, shell: true }
%
\\documentclass{article}
[DEFAULT-PACKAGES]
[EXTRA]"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsubsection*{%s}")
("\\paragraph{%s}" . "\\paragraph*{%s}")
("\\subparagraph{%s}" . "\\subparagraph*{%s}")
))
)

;; ----------------------------
;; org-modern
;; ----------------------------


(use-package org-modern
  :config
  (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
  ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
  (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.728) ;\LARGE
  (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.44) ;\Large
  (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2) ;\large
  ;; Low levels are unimportant => no scaling
  (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)

  :custom
  (org-modern-keyword nil)
  (org-modern-checkbox nil)
  (org-modern-table nil)
  (org-modern-block-name nil)

  :hook
  (org-mode . global-org-modern-mode)
  )


;; ---------------------------
;; toc-org
;; ---------------------------


(use-package toc-org
 :after (org-mode markdown-mode)
 :hook
  (
   (org-mode . toc-org-mode)
   (markdown-mode . toc-org-mode)
  )
)


;; This rely on having loaded  ~org-pretty-table.el~ in ~./lisp~ downloaded from:
;; 
;; https://github.com/Fuco1/org-pretty-table/tree/master


(progn
  (require 'org-pretty-table)
  (add-hook 'org-mode-hook (lambda () (org-pretty-table-mode))))


;; ---------------------------
;; others settings
;; ---------------------------

(let* ((variable-tuple
    (cond
      ((x-list-fonts "Droid Sans") '(:font "Droid Sans"))
      ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
      (nil (warn "Cannot find a Sans Serif Font.  Install a Sans Serif Font."))
    ))

    (base-font-color     (face-foreground 'default nil 'default))
    (headline           `(:inherit default :weight bold :foreground ,base-font-color))
    )
)


(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** undo-fu

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; Undo-fu

(use-package undo-fu
  :ensure t
  :config
  (setq
    undo-limit 67108864  ; 64mb
    undo-strong-limit 100663296 ; 96mb
    undo-outer-limit 335544320 ; 320mb
    )
)
#+end_src

** magit

Some config lines from:

https://www.adventuresinwhy.com/post/commit-message-linting/

Advanced user may want to customize *personal*  >  *imperative_verbs.txt* and maybe *:custom*
 section of the *use-package magit* 

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; set an imperative verb file:
(defvar imperative-verb-file)
(setq imperative-verb-file (concat user-emacs-directory "personal/imperative_verbs.txt"))
(defun get-imperative-verbs ()
  "Return a list of imperative verbs."
  (let ((file-path imperative-verb-file))
    (with-temp-buffer
      (insert-file-contents file-path)
      (split-string (buffer-string) "\n" t)
      )))

(defcustom my-git-commit-style-convention-checks '(summary-starts-with-capital
                                                   summary-does-not-end-with-period
                                                   summary-uses-imperative)
  "List of checks performed by `my-git-commit-check-style-conventions'.
Valid members are `summary-starts-with-capital',
`summary-does-not-end-with-period', and
`summary-uses-imperative'. That function is a member of
`git-commit-finish-query-functions'."
  :options '(summary-starts-with-capital
             summary-does-not-end-with-period
             summary-uses-imperative)
  :type '(list :convert-widget custom-hood-convert-widget)
  :group 'git-commit)

;; Parallels `git-commit-check-style-conventions'
(defun my-git-commit-check-style-conventions (force)
  "Check for violations of certain basic style conventions.

For each violation ask the user if she wants to proceed anway.
Option `my-git-commit-check-style-conventions' controls which
conventions are checked."
    (save-excursion
      (goto-char (point-min))
      (re-search-forward (git-commit-summary-regexp) nil t)
      (let ((summary (match-string 1))
            (first-word))
        (and (or (not (memq 'summary-starts-with-capital
                            my-git-commit-style-convention-checks))
                 (let ((case-fold-search nil))
                   (string-match-p "^[[:upper:]]" summary))
                 (y-or-n-p "Summary line does not start with capital letter.  Commit anyway? "))
             (or (not (memq 'summary-does-not-end-with-period
                            my-git-commit-style-convention-checks))
                 (not (string-match-p "[\\.!\\?;,:]$" summary))
                 (y-or-n-p "Summary line ends with punctuation.  Commit anyway? "))
             (or (not (memq 'summary-uses-imperative
                            my-git-commit-style-convention-checks))
                 (progn
                   (string-match "^\\([[:alpha:]]*\\)" summary)
                   (setq first-word (downcase (match-string 1 summary)))
                   (car (member first-word (get-imperative-verbs))))
                 (when (y-or-n-p "Summary line should use imperative.  Does it? ")
                   (when (y-or-n-p (format "Add `%s' to list of imperative verbs?" first-word))
                     (with-temp-buffer
                       (insert first-word)
                       (insert "\n")
                       (write-region (point-min) (point-max) imperative-verb-file t)))
                   t))))))

(use-package magit
  :custom
    (git-commit-summary-max-length 50)
    (git-commit-fill-column 72)
  :config
    (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
    (add-to-list 'git-commit-finish-query-functions
               #'my-git-commit-check-style-conventions)
)
#+end_src

** savehist

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (setq savehist-file (expand-file-name "var/history" user-emacs-directory))
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** vertico

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; Enable vertico
(use-package vertico
  :ensure t
  :demand
  :config
  (setq
    vertico-count 10
    vertico-cycle t
    vertico-preselect 'directory
  )
  :init
  (vertico-mode)
  (defun my/vertico-insert ()
    (interactive)
    (let* ((mb (minibuffer-contents-no-properties))
           (lc (if (string= mb "") mb (substring mb -1))))
      (cond ((string-match-p "^[/~:]" lc) (self-insert-command 1 ?/))
            ((file-directory-p (vertico--candidate)) (vertico-insert))
            (t (self-insert-command 1 ?/)))))
  :bind (:map vertico-map
              ("/" . #'my/vertico-insert)))

;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  :demand
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("<tab>" . #'vertico-insert) ; Choose selected candidate
              ("<escape>" . #'minibuffer-keyboard-quit) ; Close minibuffer
              ("RET"   . vertico-directory-enter)
              ("DEL"   . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** corfu

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
(use-package corfu
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `global-corfu-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+end_src

** orderless

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
(use-package orderless
  :init
  ;; Tune the global completion style settings to your liking!
  ;; This affects the minibuffer and non-lsp completion at point.
  (setq completion-styles '(orderless partial-completion basic)
        completion-category-defaults nil
        completion-category-overrides nil))
#+end_src

** marginalia


#+begin_src emacs-lisp :tangle config.el :comments link 
(use-package marginalia
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right)
  :init
  (marginalia-mode))
#+end_src

** consult

Configuration mostly taken from GitHub, some keybinding differs.

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; Mostly taken from example configuration

(use-package consult
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; see consult site for additional options.
  ;; (setq consult-project-function #'consult--default-project--function)
)
#+end_src

** cape

#+NAME: code-cape
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
(use-package cape
  ;; Bind dedicated completion commands
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p :" . cape-emoji)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)
#+end_src

** which-key

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package which-key
  :diminish which-key-mode
  :config
  (setq
    which-key-idle-delay 0.1
    which-key-popup-type 'side-window
    which-key-side-window-location 'bottom
    which-key-side-window-max-height 0.20
    which-key-compute-remaps t)
  (which-key-mode)
)
#+end_src

** multiple-cursors

See some redefinitions in [[okkfunc-code][okk functions]]
See keybinding in [[keybind-code][Keybindings]]

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------


(use-package multiple-cursors
  :init
  (custom-set-variables `(mc/always-run-for-all ,t))
  :config
  (define-key mc/keymap [remap keyboard-quit] 'mc/keyboard-quit)
  (define-key rectangular-region-mode-map [remap keyboard-quit] 'rrm/keyboard-quit)
)
#+end_src

** diff-hl

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package diff-hl
  :hook
    (
      (magit-pre-refresh . diff-hl-magit-pre-refresh)
      (magit-post-refresh . diff-hl-magit-post-refresh)
      (prog-mode . turn-on-diff-hl-mode)
    )
  :init
    (setq
      diff-hl-draw-borders nil
      ;; diff-hl-global-modes '(not org-mode)
      ;; diff-hl-fringe-bmp-function 'diff-hl-fringe-bmp-from-type
      ;; setq diff-hl-global-modes (not '(image-mode org-mode))
      )
  :config
    (global-diff-hl-mode)
  )
#+end_src

** quick-run


#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package quickrun
  :init
  (global-set-key [menu-bar tools quickrun] `(menu-item ,"Run Buffer" quickrun))
  :config
  (setq quickrun-focus-p nil)
  ;; Move cursor out of the way when displaying output
  (advice-add 'quickrun--recenter
    :after (lambda (&optional _)
      (with-selected-window
      (get-buffer-window quickrun--buffer-name)
      (goto-char (point-max)))))
)
#+end_src

** markdown-mode

Minimal settings for markdown mode.

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package markdown-mode
  :ensure t
  :mode (
          ("README\\.md\\'" . gfm-mode)
          ("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode)
        )
  ;; :init
  ;; (setq markdown-command "markdown")

)

#+end_src

** other major modes

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package yaml-mode
  :mode "\\.yml\\'"
)

(use-package haml-mode
    :mode "\\.haml\\'"
)
#+end_src

** whitespace


#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package whitespace
  :ensure t
  :config
  (setq whitespace-line-column fill-column) ;; limit line length

  ;; Only show bad whitespace
  (setq whitespace-style '(face spaces tabs newline space-mark tab-mark newline-mark ))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
    ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
      '(
        (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
        (newline-mark 10 [182 10]) ; LINE FEED,
        (tab-mark 9 [9655 9] [92 9]) ; tab
            )
  )
 )

(global-whitespace-mode t)
#+end_src

* Eldoc

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
(use-package eldoc
  :diminish eldoc-mode
  )


(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)
#+end_src

* Python

See in *Final steps* for auto-mode-alist

#+NAME: code-python
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package python
  :hook
    (
      (python-mode-hook  . flymake-mode)
      (python-ts-mode-hook . flymake-mode)
      (python-mode-hook . imenu-add-menubar-index)
      (python-ts-mode-hook . imenu-add-menubar-index)
    )
  :config
  (require 'eglot)
)

;; Python docstring

(use-package python-insert-docstring
  :ensure t
  :bind
    (:map python-ts-mode-map
      ("C-c C-n" . python-insert-docstring-with-google-style-at-point)
    )
    (:map python-mode-map
      ("C-c C-n" . python-insert-docstring-with-google-style-at-point)
    )
  )
#+end_src

* C e C++

See in *Final steps* for auto-mode-alist

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
(require 'compile)

;; (add-hook 'c++-mode-hook

(add-hook 'c++-ts-mode-hook
  (lambda ()
    (unless (file-exists-p "Makefile")
      (set (make-local-variable 'compile-command)
       (let ((file (file-name-nondirectory buffer-file-name)))
         (concat "g++ -std=c++11 -Wall -o "
             (file-name-sans-extension file)
             " " file))))))
#+end_src

* lisp

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; use imenu-add-menubar-index when using lisp to permit a more smooth navigation
(add-hook 'emacs-lisp-mode-hook 'imenu-add-menubar-index)

(add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode) ;; Requires Ispell

#+end_src

* eglot

Some customization should be done to adapt to your installation, notably:

  + *texlab* executable if is in a peculiar position (I download the most recent version from source site.
  + *jedi* *extra_paths* 


#+NAME: code-eglot
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package eglot
  :ensure t
  :config
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  ;;(add-to-list 'eglot-server-programs '(python-mode . ("pylsp")))
  (add-to-list 'eglot-server-programs '(python-ts-mode . ("pylsp")))
  ;; Eglot check parent mode that is tex at least for Latex-mode in AUCTEX
  (add-to-list 'eglot-server-programs '(tex-mode . ("/home/common/bin/texlab")))
  
  (setq-default eglot-workspace-configuration
    '((:pylsp . (:configurationSources ["flake8"]
                :plugins (
                  :pycodestyle (:enabled :json-false)
                  :mccabe (:enabled :json-false)
                  :pyflakes (:enabled :json-false)
                  :flake8 (:enabled t)
                  :pydocstyle (:enabled t :convention "google")
                  :jedi (:extra_paths ["/usr/lib/freecad/lib/"] )
                  )
                )
      ))
  )
  
  ; check conflict with
  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
  :hook
    ;;(python-mode . eglot-ensure)
    (python-ts-mode . eglot-ensure)
    (c++-ts-mode . eglot-ensure)
    (c-ts-mode . eglot-ensure)
  )
#+end_src

* tree-sitter

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(require 'treesit)

(setq
  treesit-language-source-alist
  '(
    (arduino "https://github.com/ObserverOfTime/tree-sitter-arduino")
    (bash "https://github.com/tree-sitter/tree-sitter-bash")
    (c "https://github.com/tree-sitter/tree-sitter-c")
    (cmake "https://github.com/uyha/tree-sitter-cmake")
    ;;(common-lisp "https://github.com/theHamsta/tree-sitter-commonlisp")
    (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
    (css "https://github.com/tree-sitter/tree-sitter-css")
    ;;(csharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
    (elisp "https://github.com/Wilfred/tree-sitter-elisp")
    ;;(go "https://github.com/tree-sitter/tree-sitter-go")
    ;;(go-mod "https://github.com/camdencheek/tree-sitter-go-mod")
    (html "https://github.com/tree-sitter/tree-sitter-html")
    ;;(js . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
    (json "https://github.com/tree-sitter/tree-sitter-json")
    ;;(lua "https://github.com/Azganoth/tree-sitter-lua")
    (make "https://github.com/alemuller/tree-sitter-make")
    (markdown "https://github.com/ikatyang/tree-sitter-markdown")
    (python "https://github.com/tree-sitter/tree-sitter-python")
    ;;(r "https://github.com/r-lib/tree-sitter-r")
    ;;(rust "https://github.com/tree-sitter/tree-sitter-rust")
    (toml "https://github.com/tree-sitter/tree-sitter-toml")
    ;;(tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
    ;;(typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
    (yaml "https://github.com/ikatyang/tree-sitter-yaml"))
  ;; redefine correctly the name for c++
  treesit-load-name-override-list
   '((c++ "libtree-sitter-cpp"))
   ;; major modes
   major-mode-remap-alist
 '((yaml-mode . yaml-ts-mode)
   (bash-mode . bash-ts-mode)
   (json-mode . json-ts-mode)
   (css-mode . css-ts-mode)
   (python-mode . python-ts-mode)
   (c-or-c++-mode . c-or-c++-ts-mode)
   (c-mode . c-ts-mode)
   (c++-mode . c++-ts-mode)
   (arduino-mode . arduino-cli-mode)
   )
 )


(dolist (lang treesit-language-source-alist)
  (unless (treesit-language-available-p (car lang))
    (treesit-install-language-grammar (car lang))))

(setq-default treesit-font-lock-level 3)
#+end_src

* Arduino

#+NAME: code-arduino
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package arduino-cli-mode
  :load-path "/home/common/Remote/emacs/arduino-cli-mode/"
  :custom
  (arduino-cli-warnings 'all)
  (arduino-cli-verify t)
  (arduino-cli-default-fqbn "arduino:avr:uno")
  (arduino-cli-defcmd (expand-file-name "~/bin/arduino-cli"))
  )

(add-to-list 'auto-mode-alist '("\\.ino\\'" . arduino-cli-mode))
#+end_src

* AUCTEX

This will set AUCTEX.

I use *arara* so to have a decent integration I've put a button that call the compilation from using *arara* sadly to make it working it should redefine the whole AUCTEX button bar

See relevant code in: [[code-auctex-buttons][button code customization]]

*NOTE:* place *arara.xpm* in *~/.icons/arara.xpm* if not the appropriate icon is not show in the icon bar, (it is not apparently possible to put a lisp function to define icon location in *:file*).


#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(use-package tex
  :ensure auctex
  :defer t
  :init
  ;;
  :hook
  (
    (LaTeX-mode . (lambda ()
                    (push (list 'output-pdf "Zathura")
                      TeX-view-program-selection)))
    (TeX-language-it . (lambda ()
                         (setq TeX-quote-language `(
                                                     "italian"
                                                     "``"
                                                     "''"
                                                     ,TeX-quote-after-quote))))
    (LaTeX-mode . TeX-source-correlate-mode)
    (laTeX-mode . TeX-source-correlate-mode)
    ;; Start eglot for Latex both variants Tex and AUCTEX
    (LaTeX-mode . eglot-ensure)
    (laTeX-mode . eglot-ensure)
    )
  :config
     (setq-default TeX-master nil)
     (setq
       TeX-PDF-mode t
       TeX-auto-save t
       TeX-parse-self t
       TeX-source-correlate-mode t
       ;; TeX-source-correlate-method 'synctex
       TeX-source-correlate-start-server nil
       )
      (add-to-list 'TeX-command-list
        `("Arara" "arara --verbose %s" TeX-run-TeX nil t :help "Run Arara") t)

       (add-to-list 'TeX-expand-list
         '("%sn" (lambda () server-name)))
  )

;; make forward search working
(eval-after-load "tex"
  '(define-key TeX-source-correlate-map [C-S-mouse-1]
     #'TeX-view-mouse))

(require 'reftex)

(setq reftex-plug-into-AUCTeX t)
(diminish whitespace-mode)
(diminish reftex-mode)

;; hooks for AUCTeX LaTeX mode
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(add-hook 'latex-mode-hook 'turn-on-reftex)

;; -------------------------------------
;; "Latex-clean-intermediate-suffixes" list modification

;; defined in AUCTEX, but AUCTEX loading is deferred, so we must use:
(eval-when-compile (defvar LaTeX-clean-intermediate-suffixes))

(eval-after-load "latex"
  '(setq LaTeX-clean-intermediate-suffixes
     '("\\.aux" "\\.bbl" "\\.blg" "\\.brf" "\\.fot" "\\.glo" "\\.gls" "\\.idx"
        "\\.ilg" "\\.ind" "\\.lof" "\\.log" "\\.lot" "\\.nav" "\\.out" "\\.snm"
        "\\.toc" "\\.url" "\\.bcf" "\\.run\\.xml" "\\.fls" "-blx\\.bib" "\\.acn"
        "\\.acr" "\\.alg" "\\.glg" "\\.ist" "\\.dsi" "\\.dso" "\\.nds" "\\.nlg"
        "\\.npr" "\\.nsc" "\\.pri" "\\.pro" "\\.sci" "\\.sco" "\\.uii" "\\.uio" "\\.wrt" "\\.xdy" "\\.listing" "\\.synctex.gz"))
)
#+end_src


#+NAME: code-auctex-buttons
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; Redefine AUCTEX button bar

(setq TeX-bar-LaTeX-button-alist
   '((arara :image
     (image :type xpm :file "~/.icons/arara.xpm")
     :command
     (progn
       (TeX-save-document #'TeX-master-file)
       (TeX-command "Arara" #'TeX-master-file -1)
     )
     :help
      (lambda
        (&rest ignored)
        (TeX-bar-help-from-command-list "Arara")))
 
     (latex :image
       (lambda nil
         (if TeX-PDF-mode "pdftex" "tex"))
       :command
       (progn
         (TeX-save-document #'TeX-master-file)
         (TeX-command "LaTeX" #'TeX-master-file -1)
       )
       :help
       (lambda
         (&rest ignored)
         (TeX-bar-help-from-command-list "LaTeX")
       )
     )

     (pdflatex :image "pdftex" :command
       (progn
         (TeX-save-document #'TeX-master-file)
         (TeX-command "PDFLaTeX" #'TeX-master-file -1)
       )
       :help
         (lambda
           (&rest ignored)
           (TeX-bar-help-from-command-list "PDFLaTeX"))
     )

     (next-error :image "error"
       :command TeX-next-error
       :enable
         (TeX-error-report-has-errors-p)
       :visible
         (TeX-error-report-has-errors-p)
     )

     (view :image
       (lambda nil
         (if TeX-PDF-mode "viewpdf" "viewdvi")
     )
     :command
       (TeX-command "View" #'TeX-master-file -1)
     :help
       (lambda
         (&rest ignored)
         (TeX-bar-help-from-command-list "View"))
     )

     (file :image "dvips"
       :command
         (TeX-command "File" #'TeX-master-file -1)
       :visible
         (not TeX-PDF-mode)
       :help
         (lambda
           (&rest ignored)
           (TeX-bar-help-from-command-list "File"))
     )

     (bibtex :image "bibtex"
       :command
         (TeX-command
         (if LaTeX-using-Biber "Biber" "BibTeX")
            #'TeX-master-file -1)
       :help
         (lambda
           (&rest ignored)
           (TeX-bar-help-from-command-list
           (if LaTeX-using-Biber "Biber" "BibTeX")))
     )

     (clean :image "delete"
       :command
         (TeX-command "Clean" #'TeX-master-file -1)
       :help
         (lambda
           (&rest ignored)
           (TeX-bar-help-from-command-list "Clean"))
     )
 
     (spell :image "spell"
       :command
         (TeX-command "Spell" #'TeX-master-file -1)
       :help
         (lambda
           (&rest ignored)
           (TeX-bar-help-from-command-list "Spell"))
     )

     (latex-symbols-experimental :alias :eval-group LaTeX-symbols-toolbar-switch-contents LaTeX-symbols-toolbar-contents)
 )
)

(setq
  TeX-bar-LaTeX-buttons
    '(new-file open-file dired kill-buffer save-buffer undo cut copy paste separator
       (arara) next-error view bibtex clean spell)
  ;;
  TeX-view-program-selection
   '(((output-dvi has-no-display-manager) "dvi2tty")
       ((output-dvi style-pstricks) "dvips and gv")
       (output-dvi "xdvi")
       (output-html "xdg-open")
   )
)
#+end_src

* spellchecking

It use *hunspell* as a spellchecker, and use *flyspell* to make check invoked with *F7* set in [[code-keybind-fkeys][Function keys bindings]].

A good strategy to use spellchecking is press *F7* and then use *C-,* to move to the error and activate ispell to correct word with third key after *L* in international keyboards (*C-ù* in case of italian keyboard).

A flyspell menu will appear in a window at top where you could correct words.



*note1:* Configure `LANG`, otherwise *ispell.el* (Emacs internal spellchecking facility) cannot find a 'default dictionary' even though multiple dictionaries will be configured.

*note2:* ispell-set-spellchecker-params has to be called before ispell-hunspell-add-multi-dic to make it work

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; use hunspell

(with-eval-after-load "ispell"
  ;; see note1 in config.org
  (setenv "LANG" "it_IT.UTF-8")
  (setq
    ispell-program-name "hunspell"
    ispell-dictionary okk-dict-string)
  ;; see note2 in config.org
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic okk-dict-string))
#+end_src

*flyspell* 

#+NAME: flyspell-code
#+begin_src emacs-lisp
(defun flyspell-on-for-buffer-type ()
  "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
  (interactive)
  (if (not (symbol-value flyspell-mode)) ; if not already on
    (progn
      (if (derived-mode-p 'prog-mode)
        (progn
          (message "Flyspell on (code)")
          (flyspell-prog-mode))
        ;; else
        (progn
          (message "Flyspell on (text)")
          (flyspell-mode 1)))
      ;; I tried putting (flyspell-buffer) here but it didn't seem to work
      )))

(defun flyspell-toggle ()
  "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
  (interactive)
  (if (symbol-value flyspell-mode)
    (progn ; flyspell is on, turn it off
      (message "Flyspell off")
      (flyspell-mode -1))
                                        ; else - flyspell is off, turn it on
    (flyspell-on-for-buffer-type)))

(let ((langs okk-dict-list))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))

(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))

;; activate for programming modes the special flyspell mode
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
;; turn on flyspell for org-mode
(add-hook 'org-mode-hook  'turn-on-flyspell)

#+end_src

* hl-todo

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; Highlight TODO, FIXME etc.

(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
    (setq
     hl-todo-highlight-punctuation ":"
     hl-todo-keyword-faces `(
       ("FIXME"      error bold)
       ("BUG"        error bold)
       ("BROKEN"     error bold)
       ("CAVEAT"     warning bold)
       ("WARNING"    warning bold)
       ("HACK"       warning bold)
       ("TODO"       font-lock-constant-face bold)
       ("REVIEW"     font-lock-constant-face bold)
       ("NOTE"       font-lock-keyword-face bold)
       ("IDEA"       font-lock-keyword-face bold)
       ("DEPRECATED" font-lock-doc-face bold)
       )
     )

 )
#+end_src

* ediff

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

(defvar ediff-saved-window-configuration nil "Window configuration before ediff.")

(add-hook 'ediff-load-hook
          (lambda ()
             (add-hook 'ediff-before-setup-hook
                      (lambda ()
                        (setq ediff-saved-window-configuration (current-window-configuration))))
             (let ((restore-window-configuration
                   (lambda ()
                     (set-window-configuration ediff-saved-window-configuration))))
              (add-hook 'ediff-quit-hook restore-window-configuration 'append)
              (add-hook 'ediff-suspend-hook restore-window-configuration 'append))))
#+end_src

* printing

This set a preview when hitting *C-<print>* invoking *ps-print-buffer*.

*Note:* It is blocking Emacs until you leave the previewer, as it creates a temporary document.

Usually from the viewer you could print the file.

Customize pdf viewer in *personal/print-preview* bash script.

#+NAME: code-printing
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; font-size could be defined as a cons (LANDSCAPE-SIZE . PORTRAIT-SIZE)

(setq
  ps-paper-type 'a4
  ps-print-header t
  ps-header-lines 1
  ps-header-offset 14.173228346  ;; 5mm 1pt = 0.35277777
  ps-header-font-size '(10 . 12)
  ps-header-font-family 'Helvetica
  ps-header-title-font-size '(8.0 . 9.5)
  ps-font-size '(7 . 8.5)
  ps-font-family 'Courier
  ps-lpr-command (expand-file-name "personal/print-preview" user-emacs-directory)
  ps-spool-duplex nil  ;; or t if you want to print in duplex (both faces of paper)
  )


;; Ispired by:
;; https://stackoverflow.com/questions/21320773/switch-between-printing-configurations-in-emacs

(defun ps-two-per-page ()
  (interactive)
  (require 'ps-print)
  (setq old-ps-n-up-printing ps-n-up-printing
        old-ps-n-up-border-p ps-n-up-border-p
        old-ps-font-size ps-font-size
        old-ps-top-margin ps-top-margin
        old-ps-bottom-margin ps-bottom-margin
        old-ps-left-margin ps-left-margin
        old-ps-right-margin ps-right-margin
        old-ps-n-up-margin ps-n-up-margin
        old-ps-inter-column ps-inter-column

        ps-n-up-printing 2
        ps-n-up-border-p nil
        ps-font-size (quote (8 . 11))
        ps-top-margin -20
        ps-bottom-margin -35
        ps-left-margin 18
        ps-right-margin 18
        ps-n-up-margin 1
        ps-inter-column 1))


 (defun ps-restore-default ()
  "Get old values back"
  (interactive)
  (require 'ps-print)
  (setq ps-n-up-printing old-ps-n-up-printing
        ps-n-up-border-p old-ps-n-up-border-p
        ps-font-size old-ps-font-size
        ps-top-margin old-ps-top-margin
        ps-bottom-margin old-ps-bottom-margin
        ps-left-margin old-ps-left-margin
        ps-right-margin old-ps-right-margin
        ps-n-up-margin old-ps-n-up-margin
        ps-inter-column old-ps-inter-column)) 


#+end_src

* templates

I've reused a template system see in [[file:site-lisp/okk-tmpl.el][site-lisp/okk-tmpl.el]] about what I've modified over the original implementation.


#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; Templates

(autoload 'okk-tmpl-insert "okk-tmpl" nil t)

(cl-defun oks-new-fcp (&key (template (expand-file-name "skels/skel-fc-main.el" user-emacs-directory)))
  "Create a buffer with a FreeCAD script example skeleton."

  (interactive)
  (let* ((body (with-temp-buffer
    (insert-file-contents template)
    (buffer-string)))
    (act-buffer (get-buffer-create "*new_pyton_file*")))
    (switch-to-buffer act-buffer)
    (erase-buffer)
    (python-ts-mode)
    (insert body)
    (goto-char (point-min))
    (kill-line)
    (insert (concat "## " (format-time-string "%Y-%m-%d"))))
  )
#+end_src

* dict-mode

This will use *dictd* that must be set correctly.

See in [[file:keymap.org::keydesc-dict][Dictsionary Keybindings]] for keybindings that will trigger dictionary lookup.

#+NAME: code-dict
#+begin_src emacs-lisp :tangle config.el :comments link  
;; ---------------------------------------------------------------------------
;; dict-mode


(setq
   dictionary-server "localhost"
   ;; mandatory, as the dictionary misbehaves!
   switch-to-buffer-obey-display-actions t
   dictionary-use-single-buffer t
      )

(autoload 'dictionary-search "dictionary" 
	  "Ask for a word and search it in all dictionaries" t)
(autoload 'dictionary-match-words "dictionary"
	  "Ask for a word and search all matching words in the dictionaries" t)
(autoload 'dictionary-lookup-definition "dictionary" 
	  "Unconditionally lookup the word at point." t)
(autoload 'dictionary "dictionary"
	  "Create a new dictionary buffer" t)
(autoload 'dictionary-mouse-popup-matching-words "dictionary"
	  "Display entries matching the word at the cursor" t)
(autoload 'dictionary-popup-matching-words "dictionary"
	  "Display entries matching the word at the point" t)
(autoload 'dictionary-tooltip-mode "dictionary"
	  "Display tooltips for the current word" t)
(autoload 'global-dictionary-tooltip-mode "dictionary"
     "Enable/disable dictionary-tooltip-mode for all buffers" t)

;; (add-to-list 'display-buffer-alist
;;    '("^\\*Dictionary\\*" display-buffer-in-side-window
;;      (side . left)
;;      (window-width . 50)))
#+end_src

* okk functions

Various functions that are used later in code, mostly in [[keybind-code][keybindings and menu]]

#+NAME: okkfunc-code
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; Show buffer name

(defun okk-show-buffer-name ()
  "Show the full path to the current file in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message file-name)
          (kill-new file-name))
      (error "Buffer not visiting a file"))))

;; Smart beginnint of line

(defun smarter-move-beginning-of-line (arg)
   "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1)))
)


(defun okk-pers-agenda-open ()
  (interactive)
  (find-file okk-main-agenda)
  )


(defun okk-bname-at-point ()
  "Insert buffer name at point."
  (interactive)
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point))
      (insert (concat (buffer-name)))))
  )


(defun revert-to-two-windows ()
  "Delete all other windows and split it into two."
  (interactive)
  (delete-other-windows)
  (split-window-right))


(defun okk-window-setup ()
  "Set up my initial window configuration."
  (split-window-right)
  (other-window 1)
  ;;(org-agenda-list)
  (other-window 1))

(defun okk-make-backup ()
  "Make a backup copy of current file or dired marked files.
The backup file name is in this format filename-YYWNWDHHMM.ext
YY (two digits), Week number, Week Day (1 Monday), HHMM
It is placed in the same dir. If such a file already exist, it is overwritten.
Inspired from `http://xahlee.info/emacs/emacs/elisp_make-backup.html'"
  (interactive)
  (let ((xfname buffer-file-name)
        (xdateTimeFormat "%y%W%u%H%M"))
    (if xfname
        (let ((xbackupName
               (concat (file-name-sans-extension xfname) "-" (format-time-string xdateTimeFormat) "." (file-name-extension xfname))))
          (copy-file xfname xbackupName t)
          (message (concat "Backup saved at: " xbackupName)))
      )
    )
  )


;; Don't know if it is useful, but keep here just in case

(defun okk-describe-all-keymaps ()
  "Describe all keymaps in currently-defined variables."
  (interactive)
  (with-output-to-temp-buffer "*keymaps*"
    (let (symbs seen)
      (mapatoms (lambda (s)
                  (when (and (boundp s) (keymapp (symbol-value s)))
                    (push (indirect-variable s) symbs))))
      (dolist (keymap symbs)
        (unless (memq keymap seen)
          (princ (format "* %s\n\n" keymap))
          (princ (substitute-command-keys (format "\\{%s}" keymap)))
          (princ (format "\f\n%s\n\n" (make-string (min 80 (window-width)) ?-)))
          (push keymap seen))))
    (with-current-buffer standard-output ;; temp buffer
      (setq help-xref-stack-item (list #'my-describe-all-keymaps)))))
#+end_src

* okk custom menu

A custom menu that will permit to load some files here as the configuration directory is excluded from recent files.

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------


(easy-menu-define onekk-menu nil "Personal."
  `("OneKK"
     ["Delete trailing spaces" delete-trailing-whitespace t]
     ("Configuration"
       ["Open config.org" (find-file (expand-file-name "config.org" user-emacs-directory))]
       ["Open keymap.org" (find-file (expand-file-name "keymap.org" user-emacs-directory))]
     )
     ("Directories"
       ["Open user config dir" (find-file user-emacs-directory)]
       ["Open template dir" (find-file okk-tmpl-dir)]
       ["Open denote dir" (find-file okk-denote-dir)]
     )
   )
)

;; Insert menu after options menu, in global menu bar.
(define-key-after (lookup-key global-map [menu-bar])
  [mymenu] ; shortcut for our menu
   (cons "Okk-menu" onekk-menu) 'tools
)
#+end_src

* keybindings and menu

It use *okk-keys* package, (see: [[file:site-lisp/okk-keys.el][okk-keys.el]]) to redefine keybindings for modifiers as follows:
- *C-c* with *C-d*  (mnemonics one character after C-c )
- *C-x* with *C-w*  (Not used as we redefine C-c with same use)

See [[code-okk-keys][okk-keys]]

Some keybindings are defined also in:

+ [[code-python][python-insert-docstring]]
+ [[code-denote][denote]]
+ [[code-cape][cape]]

*Note1:* In code (marked with *note1* in comments) there are keys that belongs to ISO Italian keyboard:

  + *ò* first key after *L*
  + *à* second key after *L*
  + *ù* third key after *L*

  Obviously if you don't use and ISO Italian keyboard, you should name them to reflect real character present in your keyboard

See [[file:./keymap.org]] for the resulting key map.

#+NAME: keybind-code
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; See notes in config.org

;; unset some key sequences that we override later
(global-unset-key (kbd "C-x f"))  ; assigned to set-fill-column - reassigned
(global-unset-key (kbd "C-x i"))  ; assigned to insert-file

;; 'C--' is bound to 'negative-argument' that is also bound to 'M--'
(global-unset-key (kbd "C--"))
(global-unset-key (kbd "C-<next>"))
(global-unset-key (kbd "C-<prior>"))

;; define some handy keybindings, most of them are free in the global map
(global-set-key (kbd "C-ù") 'ispell-word)  ;; note1 - spellcheck

;; unbind C-;  that will invoke flyspell-auto-correct-binding
;; as it conflict with C-; in elisp
(eval-after-load "flyspell"
  '(define-key flyspell-mode-map (kbd "C-;") nil))
;;
(global-set-key (kbd "C-<") 'expand-abbrev)  ;; expand abbreviations
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-.") 'mc/mark-next-like-this)  ;; multicursor
(global-set-key (kbd "C-,") 'mc/mark-previous-like-this)  ;; multicursor
(global-set-key (kbd "C-;") 'comment-line)
;;(global-set-key (kbd "C-<return>") 'rectangle-mark-mode)  ;; mark
(global-set-key (kbd "C-<print>") 'ps-print-buffer)
(global-set-key (kbd "C-<next>") 'next-buffer)  ;; move
(global-set-key (kbd "C-<prior>") 'previous-buffer)  ;; move
;; META
(global-set-key (kbd "M-l") 'consult-line)  ;; consult
;; some movement commands keys after L in international keymaps
(global-set-key (kbd "M-ò") 'okk-previous)  ;; note1 - moves
(global-set-key (kbd "M-à") 'okk-next)  ;; note1 - moves
;; remeber M-.  xref-find-definitions
(global-set-key (kbd "M-:") 'xref-find-references)
;; META KEYPAD
(global-set-key (kbd "M-<kp-2>") 'split-window-below)
(global-set-key (kbd "M-<kp-5>") 'delete-other-windows)
(global-set-key (kbd "M-<kp-6>") 'split-window-right)

; recent files
(global-set-key (kbd "C-c <RET>") 'recentf)


;; org-mode
(add-hook 'org-mode-hook (lambda ()
                           (local-set-key (kbd "C-c s") 'org-fold-show-subtree)))


;; Some read-expression-map redefine
(define-key read-expression-map [remap previous-line] 'previous-line-or-history-element)
(define-key read-expression-map [remap next-line] 'next-line-or-history-element)

#+end_src

** Customized keymaps

*** abbreviations C-w a

This will redefine the abbrev map that is a mess IMHO, some key combinations have four levels, but hopefully could be easily memorized.

See: [[file:keymap.org::keydesc-abbrev][Abbreviations Keymap]]

#+NAME: code-abbrev-keymap
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; Abbrev

(global-unset-key (kbd "C-x a"))

(defvar-keymap myabmap
  "e" #'expand-abbrev
  "l" #'list-abbrevs
  "m" #'edit-abbrev-file
  "n" #'expand-jump-to-next-slot
  "p" #'expand-jump-to-previous-slot
  "r" #'read-abbrev-file
  "w" #'write-abbrev-file
  )

(global-set-key (kbd "C-x a") (cons "abbrev" myabmap))

(define-key myabmap (kbd "a g") #'add-global-abbrev)
(define-key myabmap (kbd "a m") #'add-mode-abbrev)
(define-key myabmap (kbd "i g") #'inverse-add-global-abbrev)
(define-key myabmap (kbd "i m") #'inverse-add-mode-abbrev)
#+end_src

*** file C-w f

make a proper file 'keymap' standard Emacs shortcuts are mostly left untouched

+ *C-w i* that was assigned to *insert-file* is not preserved.

See: [[file:keymap.org::keydesc-files][Files Keymap]]

#+NAME: code-files-keymap
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; file map 'C-w f'
(defvar-keymap myfmap
  ;; quickly make a versioned backup file
  "b" #'okk-make-backup
  ;; Close
  "c" #'kill-this-buffer
  ;; insert file
  "i" #'insert-file
  ;; new file
  "n" #'okk-new-empty-buffer
  ;; open (find) file
  "o" #'find-file
  ;; revert buffer
  "r" #'revert-buffer
  ;; save buffer to disk
  "s" #'save-buffer
  ;; insert a template at point
  "t" #'okk-tmpl-insert
  ;; save as.. (write file)
  "w" #'wrtie-file
  
  )

(global-set-key (kbd "C-x f") (cons "files" myfmap))
#+end_src

*** search C-w s

See:  [[file:keymap.org::keydesc-search][Search Keymap]]

#+NAME: code-search-keymap
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; CUSTOMIZED keymaps

;; Search keymap
;; 'C-w s' is assigned to 'save-some-buffer', we assign it as a search prefix
;; to collect commands.
(global-unset-key (kbd "C-x s"))

(defvar-keymap mysmap
  "r" #'query-replace-regexp
  "s" #'query-replace
  )

(global-set-key (kbd "C-x s") (cons "search" mysmap))
#+end_src

*** consult C-d c

Consult is a big beast, I don0t know how to use most of its functions, so I have integrated a minimal set, but use a "prefix" to have a centralized place, to help mnemonics.

See: [[file:keymap.org::keydesc-consult][Consult Keymap]]

#+NAME: code-consult-keymap
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; integrating consult slowly
(defvar-keymap myscmap 
  "h" #'consult-history
  "l" #'consult-line
  "m" #'consult-mode-command
  )

(global-set-key (kbd "C-c c") (cons "consult" myscmap))

;; This is better suited as C-S-v
(global-set-key (kbd "C-S-v") 'consult-yank-pop)

#+end_src

*** dictionary C-d d

C-w d is already assigned to dired.

See: [[file:keymap.org::keydesc-dict][Dictionary Keymap]]

#+NAME: code-dictionary-keymap
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; key bindings for dictionary.el assigned to 'C-d d' 
(defvar-keymap mydmap
    "l" #'dictionary-lookup-definition
    "m" #'dictionary-match-words
    "s" #'dictionary-search
  )

(global-set-key (kbd "C-c d") (cons "dictionary" mydmap))
#+end_src

*** okk C-d o

This collect some keybindings.

They placed here as *C-d o* is available even in org mode.

Functions are related to:

  + org-mode
  + dictionary management functions

See: [[file:keymap.org::keydesc-okkfunc][Okk functions Keymap]]

#+NAME: code-okk-keymap
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; key binding for okk (don't confuse with org)
(defvar-keymap myomap 
  "a" #'okk-pers-agenda-open  ;; Open agenda file
  "c" #'org-capture  ;; start capture mode
  ;; se below as C-d s is not working in org-mode
  "l" #'cycle-ispell-languages
  "t" #'flyspell-toggle
  )

(global-set-key (kbd "C-c o") (cons "okk" myomap))
#+end_src

** package okk-keys

Invoke here *okk-keys* that will do the override part substituting

*Note:* After having activated this package, if you use *C-d* or *C-w* when specifying keybindings using *global-map* Emacs could raise an error if keybindings are placed
in *okk-keylist* so you should use *define-key okk-keys-overriding-map* and use the translated prefixes.

But beware some keybinding are not in *okk-keys-overriding-map* even if Emacs could say they are into it when using *C-h k.* This is a however a minor quirk.

This is a modified version of wakib-keys due to the move of the original modifiers from *C-e* to *C-w* to permit the use of  begin (*C-b)* and end *C-e* mnemonics keybindings present in the stock Emacs.

#+NAME: code-okk-keys
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; define a minimal key list for okk keys
;; See note in config.org

(use-package okk-keys
  :load-path "site-lisp/"
  :diminish okk-keys
  :init
  (setq okk-keylist
   `(
      ("C-c" . kill-ring-save)  ;; CUA
      ("C-v" . yank)  ;; CUA
      ("C-x" . kill-region)  ;; CUA
      ;; must be kept here if not it trigger Emacs quit
      ("C-z" . undo)
      ;; must be kept here if not it trigger Emacs yank
      ("C-y" . undo-redo)
     ))

  :config
  (okk-keys 1)
  (add-hook 'after-change-major-mode-hook 'okk-update-major-mode-map)
  (add-hook 'menu-bar-update-hook 'okk-update-minor-mode-maps)
  ;; Modifying other modules
  ;; When remap is used it exits isearch abruptly after first instance
  ;; Use explicit keybindings instead
  (define-key isearch-mode-map (kbd "C-s") 'isearch-repeat-forward)
  (define-key isearch-mode-map (kbd "C-r") 'isearch-repeat-backward)
  (define-key isearch-mode-map (kbd "C-v") 'isearch-yank-kill)

)
#+end_src

*** Menu

Menu are modified to make the shortcuts correctly appear.

See: [[file:site-lisp/okk-menu-bar.el][okk-menu-bar.el]]


#+NAME: code-keybind-menu
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------


;; -------------------------------------
;; load menu redefine
(eval-after-load "menu-bar" '(require 'okk-menu-bar))

#+end_src

*** some misc redefines

Some of them use *okk-keys-overriding-map* I've managed to keep them as less as possible.

#+NAME: code-keybind-misc
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; Smart beginning of line
;; remap 'move-beginning-of-line' to 'smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line] 'smarter-move-beginning-of-line)


;; consult
(define-key okk-keys-overriding-map (kbd "M-g g") 'consult-goto-line)

;; TODO: see if is feasible to make it work

;; (define-key-after global-map [menu-bar tools spell]
;;  '("cycle dict" cycle-ispell-languages t)
;; )


;; Windows settings
(bind-key "C-x 1" #'revert-to-two-windows)

;; Magit
(define-key okk-keys-overriding-map (kbd "C-w g") 'magit-status)


;; Python
(with-eval-after-load 'python
  (define-key python-mode-map (kbd "<tab>") 'python-indent-shift-right)
  (define-key python-mode-map (kbd "<backtab>") 'python-indent-shift-left))
#+end_src


#+NAME: code-keybind-fkeys
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; -------------------------------------
;; FUNCTION KEYS
;; -------------------------------------

(global-set-key (kbd "<f7>") 'flyspell-buffer)
(global-set-key (kbd "<f8>") 'quickrun)
#+end_src


#+NAME: code-keybind-mouse
#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; MOUSE

(define-key okk-keys-overriding-map
  (kbd "<C-down-mouse-1>") 'mc/add-cursor-on-click)  ;; multicursor
;; Disable mouse 2 button for copy
(unbind-key "<mouse-2>")
#+end_src


#+NAME: code-keybind-leftovers
#+begin_src emacs-lisp :tangle no :comments link :padline yes
;; ---------------------------------------------------------------------------

;;
;; "C-S-o" . revert-buffer ;; CUA  |
;; "C-w" . kill-current-buffer)
;; META
;; "M-e" . consult-isearch-history)  ;; consult
;; "M-S-u" . okk-back-to-indentation-or-beginning)
;; "M-S-x" . pp-eval-expression)


;; consult
;; C-c bindings in `mode-specific-map'
;; ("C-c c k" . consult-kmacro)
;; ("C-c c a" . consult-man)
;; ("c-c c i" . consult-info)
;; ;; Custom M-# bindings for fast register access
;; ("C-c c r l" . consult-register-load)
;; ("C-c c r s" . consult-register-store)
;; ("C-c c r i" . consult-register)
;; ;; Other custom bindings
;; ("M-y" . consult-yank-pop)
;; ([remap Info-search] . consult-info)
;; ;; C-x bindings in `ctl-x-map'
;; ("C-x M-." . consult-complex-command)  ;; orig. repeat-complex-command
;; ("C-x 4 b" . consult-buffer-other-window)  ;; orig. switch-to-buffer-other-window
;; ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
;; ("C-x t b" . consult-buffer-other-tab)  ;; orig. switch-to-buffer-other-tab
;; ("c-x r b" . consult-bookmark)  ;; orig. bookmark-jump
;; ("C-x p b" . consult-project-buffer)  ;; orig. project-switch-to-buffer
;; ;; M-g bindings in `goto-map'
;; ("M-g e" . consult-compile-error)
;; ("M-g f" . consult-flymake)  ;; Alternative: consult-flycheck
;; ("M-g g" . consult-goto-line)  ;; orig. goto-line
;; ("M-g M-g" . consult-goto-line)  ;; orig. goto-line
;; ("M-g o" . consult-outline)  ;; Alternative: consult-org-heading
;; ("M-g m" . consult-mark)
;; ("M-g k" . consult-global-mark)
;; ("M-g i" . consult-imenu)
;; ("M-g I" . consult-imenu-multi)
;; ;; Isearch integration
;; ;; Minibuffer history
;; :map minibuffer-local-map
;; ("M-s" . consult-history)  ;; orig. next-matching-history-element
;; ("M-r" . consult-history))  ;; orig. previous-matching-history-element
#+end_src

* Custom packages

Custom hooks and functions, feel free to customize things, here.

#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------
;; load custom functions
!
#+end_src

* Final steps


#+begin_src emacs-lisp :tangle yes :comments link :padline yes
;; ---------------------------------------------------------------------------

;; run every 5 minutes (300 seconds) a save of recent files
;; keep here as if create errors when starting from a void packages dir
(run-at-time nil 300 'recentf-save-list)

(put 'upcase-region 'disabled nil)

;; This is an optional customization useful if you edit FreeCAD macros
(add-to-list 'auto-mode-alist '("\\.FCMacro\\'" . python-mode))

;; check to see if it is working also for the c++-ts-mode
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

(add-hook 'emacs-startup-hook #'okk-window-setup)

(setq
  flymake-mode-line-lighter "Fm"
  )

;; Fix some modes that appear in modeline
(diminish 'global-whitespace-mode)
(diminish 'reftex-mode)
(diminish 'org-pretty-table-mode)
;; TODO: check the "Ind" and "Wrap" modeline indicator, they seems superflous

;; default major mode
(setq-default major-mode 'text-mode)
#+end_src


* COMMENT Local Variables
# Local Variables:
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# End:
